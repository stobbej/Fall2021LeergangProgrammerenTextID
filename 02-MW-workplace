# Fall 2021 - Leergang Programmeren TextID
# file          :   JST-begin/py
# date          :   2022-01-21
# author        :   StobbeJ
#
# Opdracht: Tekstidentificatie
#
# Naam: Marlies Wanders, Jeroen van Kleef, Jeroen Stobbe
#

import string

class TextModel:
    """A class supporting complex models of text."""

    def __init__(self):
        """Create an empty TextModel."""
        #
        # Maak dictionary's voor elke eigenschap
        #
        self.words = {}             # Om woorden te tellen
        self.word_lengths = {}      # Om woordlengtes te tellen
        self.stems = {}             # Om stammen te tellen
        self.sentence_lengths = {}  # Om zinslengtes te tellen
        #
        # Maak een eigen dictionary
        #
        self.my_feature = {}        # Om ... te tellen

    def __repr__(self):
        """Display the contents of a TextModel."""
        s = 'Woorden:\n' + str(self.words) + '\n\n'
        s += 'Woordlengtes:\n' + str(self.word_lengths) + '\n\n'
        s += 'Stammen:\n' + str(self.stems) + '\n\n'
        s += 'Zinslengtes:\n' + str(self.sentence_lengths) + '\n\n'
        s += 'MIJN EIGENSCHAP:\n' + str(self.my_feature)
        return s
    
    # Voeg hier andere methodes toe.
    # Je hebt in het bijzonder methodes nodig die het model vullen.

    def read_text_from_file(self, filename):
        """
        method:     De methode plaatst de inhoud van 'filename' in de variabele 'self.text' as string
        argument:   filename, as string
        return:     self.text, as string
        """

        with open(filename) as file:
            # input       =   file.read().replace("\n"", " ")            # vervang EndOfLine met een spatie
            # moeten we op termijn de inhoud van een tekstbestand schonen van vreemde technische karakters?
            input       =   file.read() 
            self.text   =   input
        
        return self.text

    def make_sentence_lengths(self):
        """
        method:     De methode bepaalt de lengte van zinnen en voert een count uit op identieke zinlengte
        argument:   self
        return:     sentence_lengths, as dictionary {lengte sentence: count}

        """
        
        # dictionary en teller aanmaken
        zinnen  =   []
        d       =   {}
        count   =   0
        
        # woorden splitsen
        text    =   self.read_text_from_file(filename)
        words   =   self.text.split()

        # aantal woorden per zin tellen
        for w in words:
            if w[-1] not in ".?!":
                count   +=  1
            else:
                count   +=  1
                zinnen  +=  [count]
                count   =   0          
        
        # dictionary maken
        for lengte in zinnen:
            if lengte not in d:
                d[lengte]   =   1
            else:
                d[lengte]   +=  1
        
        return(d)

        
            
##################### Initialiseren naar persoonlijke DEV-environment #####################
# Set path naar de locatie van tekst-bestanden
# import os
# script_dir = os.path.dirname(os.path.abspath(__file__)) #<-- absolute dir the script is in
# rel_path = "\\Tekst-bestanden\\"
path_tekstbestanden = """C:\\Users\\marli\\SynologyDrive\\Marlies Werk\\Studies en opleidingen\\IT Academy - Leergang Programmeren\\TextID\\Fall2021LeergangProgrammerenTextID\\Tekst-bestanden\\"""
tekstbestand       = "test.txt"
filename = path_tekstbestanden + tekstbestand

#
##################### Initialiseren naar persoonlijke DEV-environment #####################
# Hier kan je dingen testen...
tm = TextModel()
s = tm.read_text_from_file(filename)
print(tm.make_sentence_lengths())

# assert tm.sentence_lengths == {5: 1, 16: 1, 6: 1, 3: 1}
