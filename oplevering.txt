********************************
Beschrijving van de analyse:
********************************

Onze applicatie vergelijkt drie teksten met elkaar. Deze drie teksten bestaan uit twee bron teksten van twee verschillende auteurs. Dit zijn model1 en model2. Deze twee teksten worden vervolgens vergeleken met de derde tekst van een onbekende auteur. Op basis teksteigenschappen zoals woordlengte, woordkeuze, betrekkelijke voornaamwoorden en hulpwerkwoorden proberen we een handtekening van een auteur vast te stellen. Die handtekening houden we vervolgens tegen de onbekende tekst aan in de hoop de auteur te kunnen identificieren.

De analyse van de teksten vindt plaats op volgorde van invoer waarbij twee modellen op het scherm worden gepresenteerd. De derde tekst (de unknown) wordt vervolgens vergeleken met model 1 en model 2. Wanneer de onbekende tekst dichter bij een tekst ligt, wordt er een punt opgeteld bij de score. Bij een score van meer dan de helft van de testen "wint" dat model. Op dat moment is het waarschijnlijker dat de tekst is geschreven door het winnende model dan door het verliezende model.

Daarbij merken we wel op dat een 7-5 uitslag uiteraard iets minder zegt dant 11-1 of 12-0.

De 12 teksteigenschappen waar we op testen zijn:
* woorden
* woordlengte
* zinslengte
* woordstammen
* interpunctie
* lidwoorden
* citaten
* betrekkelijke voornaamwoorden
* bezittelijke voornaamwoorden
* bijvoeglijk naamwoorden (met toon of emotie)
* hulpwerkwoorden
* woordenschat

********************************
Gebruiksaanwijzing:
********************************

De teksten worden uitgelezen in de laatste regels van oplevering.py. Belangrijk hierbij is om de path en bestandsnaameigenschappen even te controleren voordat je het script runt. Alle configuratieopties staan in de oplevering.py na regel 583 genoemd.
Vanaf regel 591 worden meerder tekstopties gegeven per tekstmodel gebaseerd op de bijgesloten teksten bij de opdracht. Deze staan uitgecomment zodat ze eenvoudig te selecteren zijn door de # en spatie weg te halen. 

********************************
De zelf toegevoegde eigenschappen zijn:
********************************

[citaten]
Het zoeken op citaten geeft een indicatie van wat de verhouding is tussen conversatie en beschijvende tekst. 

[bepaalde onbepaalde lidwoorden]
Bij gebruik van 'a, an' is niet zeker wie of wat bedoeld wordt. Als wel duidelijk is om wie of wat het gaat wordt het bepaalde lidwoord 'the' gebruikt. ‘Daar loopt een vrouw. De vrouw draagt een beige jas. Ik vind de jas mooi.’ 

[betrekkelijke voornaamwoorden]
Een betrekkelijk voornaamwoord verbindt twee zinnen met elkaar. Bv. in 'Het woord, dat ik zoek' is 'dat' het betrekkelijk voornaamwoord.

[bezittelijke voornaamwoorden]
Bezittelijke voornaamworden (possessives) duiden aan 'van wie' een bepaald object is. In het Engels gaat het dan om een woord als "mine" of "yours". Bij deze eigenschap wordt het voorkomen van possessives en de hoeveelheid afgezet tegen de andere teksten. De tekst die het dichtste bij de verdeling van de onbekende tekst komt, wint.

[uitdrukkingen van toon of emotie]
Een bijvoeglijk naamwoord is een woord dat een eigenschap of toestand van een ander woord benoemt. Hier is getoetst op de aanwezigheid van een lijst van bijvoeglijk naamwoorden die toon of emotie uitdrukken.

[hulpwerkwoorden]
Hulpwerkwoorden (modals verbs) zijn aanvullende werkwoorden die de structuur van een zin bepalen. In dit geval (Engels) gaat het om deze woorden: can, may, must, shall, will, could, might, should en would. In het tekstmodel worden de teksten vergeleken o.b.v. de hoeveelheid waarin deze hulpwerkwoorden voor komen. De tekst die het dichtst bij komt, wint.

[woordenschat]
Deze eigenschap vergelijkt de woordenschat die is gebruikt voor iedere tekst. Dit gebruikt de dictionary words, maar kijkt daarbij alleen naar de lengte van die dictionary om vast te stellen hoeveel verschillende woorden zijn gebruikt. Het tekstmodel dat het dichtst bij de onbekende tekst komt, wint. 

Belangrijk hierbij om op te merken is dat deze functie gevoelig is voor de lengte van de teksten en dus vooral tot zijn recht komt bij teksten van vergelijkbare lengte.

********************************
Tekstmodellen: Oud vs. Nieuw
********************************

We onderzochten Harry Potter 1 (model 1) met een tekst van Holmes(1892) (unknown) en een tekst van Austen (1813) (model 2). De verwachting is dat Holmes en Austen dicht bij elkaar liggen. Kortom dat model 2 gaat winnen.

Resultaten:
Model 2 (Austen) wint op 9 teksteigenschappen, waar bij Harry Potter wint op de teksteigenschappen articles, citaten en adjectives. We hadden inderdaad verwacht dat Harry Potter zou gaan scoren op citaten en adjectives.

Vergelijkingsresultaten:

                     naam       model1       model2 
                     ----       ------       ------ 
                    words   -1134246.41   -1099527.59 
             word_lengths   -329214.15   -328178.94 
         sentence_lengths    -39797.42    -39559.18 
                    stems   -1123728.81   -1090208.32 
              punctuation    -41720.15    -32565.04 
                 articles     -8052.95     -8053.01 
                  citaten     -7725.34     -7980.47 
        relative_pronouns     -6450.45     -5515.68 
               adjectives     -2882.48     -3105.89 
                   modals     -5676.97     -5233.93 
              possessives     -9996.60     -9568.00 
               vocabulary      4341.00      2548.00 


--> Model 1 wint op 3 features
--> Model 2 wint op 9 features


+++++ Model 2 komt beter overeen ! +++++


********************************
Harry Potter vs. Sherlock Holmes
********************************

We maakten een vergelijking tussen Harry Potter 1 en Harry Potter 2 van J.K. Rowling. Daarbij simuleren we dat we niet weten wie het tweede Potter-boek heeft geschreven. Het doel is natuurlijk om aan te tonen o.b.v. data dat Potter 1 en Potter 2 door dezelfde auteur zijn geschreven.

Resultaten:
Met ons model wordt Harry Potter 2 duidelijk herkend als van dezelfde auteurs als Harry Potter 1. Als tweede model hebben we The Adventures of Sherlock Holmes gebruikt van Sir Arthur Conan Doyle. Deze tekst heeft duidelijk andere eigenschappen en dat is in het model ook terug te zien.

Uiteindelijk komen 11 van de 12 tests in het voordeel van Harry Potter uit de bus, met alleen de articles als winst voor Holmes.

Vergelijkingsresultaten:

                     naam       model1       model2 
                     ----       ------       ------ 
                    words   -849648.77   -943016.59 
             word_lengths   -257188.86   -258869.83 
         sentence_lengths    -34445.92    -34625.83 
                    stems   -839323.71   -932076.46 
              punctuation    -68125.88   -122693.92 
                 articles     -5565.21     -5564.97 
                  citaten     -9937.06    -10071.82 
        relative_pronouns     -2319.52     -2658.30 
               adjectives     -2501.67     -2573.93 
                   modals     -1984.06     -2111.72 
              possessives     -5191.99     -5991.54 
               vocabulary      1488.00     -2853.00 


--> Model 1 wint op 11 features
--> Model 2 wint op 1 features


+++++ Model 1 komt beter overeen ! +++++

********************************
Helpteksten van onze Class:
********************************

class TextModel(builtins.object)
 |  A class supporting complex models of text.
 |
 |  Methods defined here:
 |
 |  __init__(self)
 |      Create an empty TextModel.
 |
 |  __repr__(self)
 |      Display the contents of a TextModel.
 |
 |  clean_string(self, s)
 |      method:         the method removes interpunction and set words in lower-case
 |      argument:       self, s = string
 |      return:         clean_string, as string
 |
 |  compare_dictionaries(self, d, nd1, nd2)
 |      method:         the method calculates the probability that the dictionary d arises from the distribution of the data in the
 |                      normalized dictionary nd1, and the same probability, but for nd2.
 |      argument:       self
 |                      d: dictionary
 |                      nd1: normalized dictionary 1
 |                      nd2: normalized dictionary 2
 |      return:         probability
 |
 |  compare_text_with_two_models(self, model1, model2)
 |      method:         the method compares the text with two other models
 |      argument:       self
 |                      model1, an object with dictionaries
 |                      model2, an object with dictionaries
 |      return:         printed result
 |
 |  create_all_dictionaries(self)
 |      method:         the method creates all required dictionaries
 |      argument:       self
 |      return:         created dictionaries
 |
 |  make_adjectives(self)
 |      method:         the method creates a dictionary of the use of adjectives that express tone or emotion
 |      argument:       self
 |      return:         self.adjectives, as dictionary {adjective: count}
 |
 |  make_articles(self)
 |      method:         the method creates a dictionary with articles and counts the number of bepaald en onbepaald articles
 |      argument:       self
 |      return:         make_articles, as dictionary {arcticles: count}
 |
 |  make_modals(self)
 |      Method: Detect commonly used modals in text.
 |      Argument: self.
 |      Return: number of modals used in the source material (int) and a dict of the modals itself.
 |
 |  make_possessives(self)
 |      Method: Detect commonly used possessives in text.
 |      Argument: self.
 |      Return: number of modals used in the source material (int) and a dict of the possessives itself.
 |
 |  make_punctuation(self)
 |      method:         the method creates a dictionary with punctuation and counts the number of equal punctuation
 |      argument:       self
 |      return:         make_punctuation, as dictionary {punctuation: count }
 |
 |  make_quotes(self)
 |      method:         the method determines if a sentences is quotes and counts the number of sentences with quotes
 |      argument:       self
 |      return:         make_quotes, as dictionary {quotes}
 |
 |  make_relative_pronouns(self)
 |      method:         the method creates a dictionary of the use of relative pronouns
 |      argument:       self
 |      return:         self.relative_pronouns, as dictionary {pronoun: count}
 |
 |  make_sentence_lengths(self)
 |      method:         the method calculates the lenght of sentences and counts the number of sentences with equal lenght
 |      argument:       self
 |      return:         sentence_lengths, as dictionary {lengte sentence: count}
 |
 |  make_stems(self)
 |      method:         the method creates a dictionary with stems and counts the number of equal stems
 |      argument:       self
 |      return:         make_stems, as dictionary {stem: count}
 |
 |  make_word_lengths(self)
 |      method:         the method creates a dictionary with wordslenghts and counts the number of words with equal lenght
 |      argument:       self
 |      return:         make_word_lengths, as dictionary {lengte word: count}
 |
 |  make_words(self)
 |      method:         the method creates a dictionary with words and counts the number of equal words
 |      argument:       self
 |      return:         make_words, as dictionary {word: count}
 |
 |  normalize_dictionary(self, d)
 |      method:         the method creates from a dictionary a normalized dictionary
 |      argumnent:      self
 |                      d: as dictionary
 |      return:         normalized dictionary
 |
 |  read_text_from_file(self, filename)
 |      method:         the method reads the content of a file in the variable self.text as string
 |      argument:       filename:       string - the filename of the file
 |      return:         read string
 |
 |  smallest_value(self, nd1, nd2)
 |      method:         the method returns the smalles_value of two normalized dictionaries
 |      argument:       self
 |                      nd1: normalized dictionary 1
 |                      nd2: normalized dictionary 2
 |      return          smallest_value of a dictionary 1 or 2
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)