Help on class TextModel in module __main__:

class TextModel(builtins.object)
 |  A class supporting complex models of text.
 |
 |  Methods defined here:
 |
 |  __init__(self)
 |      Create an empty TextModel.
 |
 |  __repr__(self)
 |      Display the contents of a TextModel.
 |
 |  clean_string(self, s)
 |      method:         the method removes interpunction and set words in lower-case
 |      argument:       self, s = string
 |      return:         clean_string, as string
 |
 |  compare_dictionaries(self, d, nd1, nd2)
 |      method:         the method calculates the probability that the dictionary d arises from the distribution of the data in the
 |                      normalized dictionary nd1, and the same probability, but for nd2.
 |      argument:       self
 |                      d: dictionary
 |                      nd1: normalized dictionary 1
 |                      nd2: normalized dictionary 2
 |      return:         probability
 |
 |  compare_text_with_two_models(self, model1, model2)
 |      method:         the method compares the text with two other models
 |      argument:       self
 |                      model1, an object with dictionaries
 |                      model2, an object with dictionaries
 |      return:         printed result
 |
 |  create_all_dictionaries(self)
 |      method:         the method creates all required dictionaries
 |      argument:       self
 |      return:         created dictionaries
 |
 |  make_articles(self)
 |      method:         the method creates a dictionary with articles and counts the number of equal articles
 |      argument:       self
 |      return:         make_articles, as dictionary {arcticles: count}
 |
 |  make_colloquialism(self)
 |      method:         the method determines if a sentences is colloquialism and counts the number of sentences with colloquialism
 |      argument:       self
 |      return:         make_colloquialism, as dictionary {colloquialism}
 |
 |  make_punctuation(self)
 |      method:         the method creates a dictionary with punctuation and counts the number of equal punctuation
 |      argument:       self
 |      return:         make_punctuation, as dictionary {punctuation: count }
 |
 |  make_sentence_lengths(self)
 |      method:         the method calculates the lenght of sentences and counts the number of sentences with equal lenght
 |      argument:       self
 |      return:         sentence_lengths, as dictionary {lengte sentence: count}
 |
 |  make_stems(self)
 |      method:         the method creates a dictionary with stems and counts the number of equal stems
 |      argument:       self
 |      return:         make_stems, as dictionary {stem: count}
 |
 |  make_word_lengths(self)
 |      method:         the method creates a dictionary with wordslenghts and counts the number of words with equal lenght
 |      argument:       self
 |      return:         make_word_lengths, as dictionary {lengte word: count}
 |
 |  make_words(self)
 |      method:         the method creates a dictionary with words and counts the number of equal words
 |      argument:       self
 |      return:         make_words, as dictionary {word: count}
 |
 |  normalize_dictionary(self, d)
 |      method:         the method creates from a dictionary a normalized dictionary
 |      argumnent:      self
 |                      d: as dictionary
 |      return:         normalized dictionary
 |
 |  read_text_from_file(self, filename)
 |      method:         the method reads the content of a file in the variable self.text as string
 |      argument:       filename:       string - the filename of the file
 |      return:         read string
 |
 |  smallest_value(self, nd1, nd2)
 |      method:         the method returns the smalles_value of two normalized dictionaries
 |      argument:       self
 |                      nd1: normalized dictionary 1
 |                      nd2: normalized dictionary 2
 |      return          smallest_value of a dictionary 1 or 2
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)